// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace NetModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StackDump : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static StackDump GetRootAsStackDump(ByteBuffer _bb) { return GetRootAsStackDump(_bb, new StackDump()); }
  public static StackDump GetRootAsStackDump(ByteBuffer _bb, StackDump obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool StackDumpBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DEBB"); }
  public static bool VerifyStackDump(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DEBB", false, StackDumpVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StackDump __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NetModels.StackFrame? Frames(int j) { int o = __p.__offset(4); return o != 0 ? (NetModels.StackFrame?)(new NetModels.StackFrame()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public NetModels.SourceCodeReference? CurentInstruction { get { int o = __p.__offset(6); return o != 0 ? (NetModels.SourceCodeReference?)(new NetModels.SourceCodeReference()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Messages(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MessagesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<NetModels.StackDump> CreateStackDump(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      Offset<NetModels.SourceCodeReference> curent_instructionOffset = default(Offset<NetModels.SourceCodeReference>),
      VectorOffset messagesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    StackDump.AddMessages(builder, messagesOffset);
    StackDump.AddCurentInstruction(builder, curent_instructionOffset);
    StackDump.AddFrames(builder, framesOffset);
    return StackDump.EndStackDump(builder);
  }

  public static void StartStackDump(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, Offset<NetModels.StackFrame>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, Offset<NetModels.StackFrame>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<NetModels.StackFrame>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<NetModels.StackFrame>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCurentInstruction(FlatBufferBuilder builder, Offset<NetModels.SourceCodeReference> curentInstructionOffset) { builder.AddOffset(1, curentInstructionOffset.Value, 0); }
  public static void AddMessages(FlatBufferBuilder builder, VectorOffset messagesOffset) { builder.AddOffset(2, messagesOffset.Value, 0); }
  public static VectorOffset CreateMessagesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMessagesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMessagesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMessagesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMessagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NetModels.StackDump> EndStackDump(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<NetModels.StackDump>(o);
  }
  public static void FinishStackDumpBuffer(FlatBufferBuilder builder, Offset<NetModels.StackDump> offset) { builder.Finish(offset.Value, "DEBB"); }
  public static void FinishSizePrefixedStackDumpBuffer(FlatBufferBuilder builder, Offset<NetModels.StackDump> offset) { builder.FinishSizePrefixed(offset.Value, "DEBB"); }
  public StackDumpT UnPack() {
    var _o = new StackDumpT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StackDumpT _o) {
    _o.Frames = new List<NetModels.StackFrameT>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j).HasValue ? this.Frames(_j).Value.UnPack() : null);}
    _o.CurentInstruction = this.CurentInstruction.HasValue ? this.CurentInstruction.Value.UnPack() : null;
    _o.Messages = new List<string>();
    for (var _j = 0; _j < this.MessagesLength; ++_j) {_o.Messages.Add(this.Messages(_j));}
  }
  public static Offset<NetModels.StackDump> Pack(FlatBufferBuilder builder, StackDumpT _o) {
    if (_o == null) return default(Offset<NetModels.StackDump>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = new Offset<NetModels.StackFrame>[_o.Frames.Count];
      for (var _j = 0; _j < __frames.Length; ++_j) { __frames[_j] = NetModels.StackFrame.Pack(builder, _o.Frames[_j]); }
      _frames = CreateFramesVector(builder, __frames);
    }
    var _curent_instruction = _o.CurentInstruction == null ? default(Offset<NetModels.SourceCodeReference>) : NetModels.SourceCodeReference.Pack(builder, _o.CurentInstruction);
    var _messages = default(VectorOffset);
    if (_o.Messages != null) {
      var __messages = new StringOffset[_o.Messages.Count];
      for (var _j = 0; _j < __messages.Length; ++_j) { __messages[_j] = builder.CreateString(_o.Messages[_j]); }
      _messages = CreateMessagesVector(builder, __messages);
    }
    return CreateStackDump(
      builder,
      _frames,
      _curent_instruction,
      _messages);
  }
}

public class StackDumpT
{
  public List<NetModels.StackFrameT> Frames { get; set; }
  public NetModels.SourceCodeReferenceT CurentInstruction { get; set; }
  public List<string> Messages { get; set; }

  public StackDumpT() {
    this.Frames = null;
    this.CurentInstruction = null;
    this.Messages = null;
  }
  public static StackDumpT DeserializeFromBinary(byte[] fbBuffer) {
    return StackDump.GetRootAsStackDump(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    StackDump.FinishStackDumpBuffer(fbb, StackDump.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class StackDumpVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Frames*/, NetModels.StackFrameVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*CurentInstruction*/, NetModels.SourceCodeReferenceVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*Messages*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
