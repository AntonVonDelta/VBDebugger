// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEBUGEVENT_NETMODELS_H_
#define FLATBUFFERS_GENERATED_DEBUGEVENT_NETMODELS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace NetModels {

struct DebugEvent;
struct DebugEventBuilder;
struct DebugEventT;

enum class EventType : int32_t {
  None = 0,
  EnteredProcedure = 1,
  LeaveProcedure = 2,
  Log = 3,
  MIN = None,
  MAX = Log
};

inline const EventType (&EnumValuesEventType())[4] {
  static const EventType values[] = {
    EventType::None,
    EventType::EnteredProcedure,
    EventType::LeaveProcedure,
    EventType::Log
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[5] = {
    "None",
    "EnteredProcedure",
    "LeaveProcedure",
    "Log",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType::None, EventType::Log)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

struct DebugEventT : public ::flatbuffers::NativeTable {
    using type = DebugEvent;
  typedef DebugEvent TableType;
  NetModels::EventType event_type = NetModels::EventType::None;
  std::string scope_name{};
  std::string source_file_name{};
  int32_t line_number = 0;
  std::string scope_data{};
};

struct DebugEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DebugEventT NativeTableType;
  typedef DebugEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_SCOPE_NAME = 6,
    VT_SOURCE_FILE_NAME = 8,
    VT_LINE_NUMBER = 10,
    VT_SCOPE_DATA = 12
  };
  NetModels::EventType event_type() const {
    return static_cast<NetModels::EventType>(GetField<int32_t>(VT_EVENT_TYPE, 0));
  }
  const ::flatbuffers::String *scope_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE_NAME);
  }
  const ::flatbuffers::String *source_file_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_FILE_NAME);
  }
  int32_t line_number() const {
    return GetField<int32_t>(VT_LINE_NUMBER, 0);
  }
  const ::flatbuffers::String *scope_data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_EVENT_TYPE, 4) &&
           VerifyOffsetRequired(verifier, VT_SCOPE_NAME) &&
           verifier.VerifyString(scope_name()) &&
           VerifyOffsetRequired(verifier, VT_SOURCE_FILE_NAME) &&
           verifier.VerifyString(source_file_name()) &&
           VerifyField<int32_t>(verifier, VT_LINE_NUMBER, 4) &&
           VerifyOffsetRequired(verifier, VT_SCOPE_DATA) &&
           verifier.VerifyString(scope_data()) &&
           verifier.EndTable();
  }
  DebugEventT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DebugEventT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DebugEvent> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DebugEventT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DebugEventBuilder {
  typedef DebugEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type(NetModels::EventType event_type) {
    fbb_.AddElement<int32_t>(DebugEvent::VT_EVENT_TYPE, static_cast<int32_t>(event_type), 0);
  }
  void add_scope_name(::flatbuffers::Offset<::flatbuffers::String> scope_name) {
    fbb_.AddOffset(DebugEvent::VT_SCOPE_NAME, scope_name);
  }
  void add_source_file_name(::flatbuffers::Offset<::flatbuffers::String> source_file_name) {
    fbb_.AddOffset(DebugEvent::VT_SOURCE_FILE_NAME, source_file_name);
  }
  void add_line_number(int32_t line_number) {
    fbb_.AddElement<int32_t>(DebugEvent::VT_LINE_NUMBER, line_number, 0);
  }
  void add_scope_data(::flatbuffers::Offset<::flatbuffers::String> scope_data) {
    fbb_.AddOffset(DebugEvent::VT_SCOPE_DATA, scope_data);
  }
  explicit DebugEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DebugEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DebugEvent>(end);
    fbb_.Required(o, DebugEvent::VT_SCOPE_NAME);
    fbb_.Required(o, DebugEvent::VT_SOURCE_FILE_NAME);
    fbb_.Required(o, DebugEvent::VT_SCOPE_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<DebugEvent> CreateDebugEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NetModels::EventType event_type = NetModels::EventType::None,
    ::flatbuffers::Offset<::flatbuffers::String> scope_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source_file_name = 0,
    int32_t line_number = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scope_data = 0) {
  DebugEventBuilder builder_(_fbb);
  builder_.add_scope_data(scope_data);
  builder_.add_line_number(line_number);
  builder_.add_source_file_name(source_file_name);
  builder_.add_scope_name(scope_name);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DebugEvent> CreateDebugEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NetModels::EventType event_type = NetModels::EventType::None,
    const char *scope_name = nullptr,
    const char *source_file_name = nullptr,
    int32_t line_number = 0,
    const char *scope_data = nullptr) {
  auto scope_name__ = scope_name ? _fbb.CreateString(scope_name) : 0;
  auto source_file_name__ = source_file_name ? _fbb.CreateString(source_file_name) : 0;
  auto scope_data__ = scope_data ? _fbb.CreateString(scope_data) : 0;
  return NetModels::CreateDebugEvent(
      _fbb,
      event_type,
      scope_name__,
      source_file_name__,
      line_number,
      scope_data__);
}

::flatbuffers::Offset<DebugEvent> CreateDebugEvent(::flatbuffers::FlatBufferBuilder &_fbb, const DebugEventT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DebugEventT *DebugEvent::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DebugEventT>(new DebugEventT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DebugEvent::UnPackTo(DebugEventT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = event_type(); _o->event_type = _e; }
  { auto _e = scope_name(); if (_e) _o->scope_name = _e->str(); }
  { auto _e = source_file_name(); if (_e) _o->source_file_name = _e->str(); }
  { auto _e = line_number(); _o->line_number = _e; }
  { auto _e = scope_data(); if (_e) _o->scope_data = _e->str(); }
}

inline ::flatbuffers::Offset<DebugEvent> DebugEvent::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DebugEventT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDebugEvent(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DebugEvent> CreateDebugEvent(::flatbuffers::FlatBufferBuilder &_fbb, const DebugEventT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DebugEventT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _event_type = _o->event_type;
  auto _scope_name = _fbb.CreateString(_o->scope_name);
  auto _source_file_name = _fbb.CreateString(_o->source_file_name);
  auto _line_number = _o->line_number;
  auto _scope_data = _fbb.CreateString(_o->scope_data);
  return NetModels::CreateDebugEvent(
      _fbb,
      _event_type,
      _scope_name,
      _source_file_name,
      _line_number,
      _scope_data);
}

inline const NetModels::DebugEvent *GetDebugEvent(const void *buf) {
  return ::flatbuffers::GetRoot<NetModels::DebugEvent>(buf);
}

inline const NetModels::DebugEvent *GetSizePrefixedDebugEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NetModels::DebugEvent>(buf);
}

inline bool VerifyDebugEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NetModels::DebugEvent>(nullptr);
}

inline bool VerifySizePrefixedDebugEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NetModels::DebugEvent>(nullptr);
}

inline void FinishDebugEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::DebugEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDebugEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::DebugEvent> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<NetModels::DebugEventT> UnPackDebugEvent(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::DebugEventT>(GetDebugEvent(buf)->UnPack(res));
}

inline std::unique_ptr<NetModels::DebugEventT> UnPackSizePrefixedDebugEvent(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::DebugEventT>(GetSizePrefixedDebugEvent(buf)->UnPack(res));
}

}  // namespace NetModels

#endif  // FLATBUFFERS_GENERATED_DEBUGEVENT_NETMODELS_H_
