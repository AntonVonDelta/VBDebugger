// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEBUGCOMMAND_NETMODELS_H_
#define FLATBUFFERS_GENERATED_DEBUGCOMMAND_NETMODELS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace NetModels {

struct DebugCommand;
struct DebugCommandBuilder;
struct DebugCommandT;

enum class CommandType : int32_t {
  Pause = 0,
  Resume = 1,
  NextInstruction = 2,
  SkipInstruction = 3,
  MIN = Pause,
  MAX = SkipInstruction
};

inline const CommandType (&EnumValuesCommandType())[4] {
  static const CommandType values[] = {
    CommandType::Pause,
    CommandType::Resume,
    CommandType::NextInstruction,
    CommandType::SkipInstruction
  };
  return values;
}

inline const char * const *EnumNamesCommandType() {
  static const char * const names[5] = {
    "Pause",
    "Resume",
    "NextInstruction",
    "SkipInstruction",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommandType(CommandType e) {
  if (::flatbuffers::IsOutRange(e, CommandType::Pause, CommandType::SkipInstruction)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommandType()[index];
}

struct DebugCommandT : public ::flatbuffers::NativeTable {
  typedef DebugCommand TableType;
  NetModels::CommandType command_type = NetModels::CommandType::Pause;
};

struct DebugCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DebugCommandT NativeTableType;
  typedef DebugCommandBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMAND_TYPE = 4
  };
  NetModels::CommandType command_type() const {
    return static_cast<NetModels::CommandType>(GetField<int32_t>(VT_COMMAND_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_COMMAND_TYPE, 4) &&
           verifier.EndTable();
  }
  DebugCommandT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DebugCommandT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DebugCommand> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DebugCommandT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DebugCommandBuilder {
  typedef DebugCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_command_type(NetModels::CommandType command_type) {
    fbb_.AddElement<int32_t>(DebugCommand::VT_COMMAND_TYPE, static_cast<int32_t>(command_type), 0);
  }
  explicit DebugCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DebugCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DebugCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DebugCommand> CreateDebugCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NetModels::CommandType command_type = NetModels::CommandType::Pause) {
  DebugCommandBuilder builder_(_fbb);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

::flatbuffers::Offset<DebugCommand> CreateDebugCommand(::flatbuffers::FlatBufferBuilder &_fbb, const DebugCommandT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DebugCommandT *DebugCommand::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DebugCommandT>(new DebugCommandT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DebugCommand::UnPackTo(DebugCommandT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = command_type(); _o->command_type = _e; }
}

inline ::flatbuffers::Offset<DebugCommand> DebugCommand::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DebugCommandT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDebugCommand(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DebugCommand> CreateDebugCommand(::flatbuffers::FlatBufferBuilder &_fbb, const DebugCommandT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DebugCommandT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _command_type = _o->command_type;
  return NetModels::CreateDebugCommand(
      _fbb,
      _command_type);
}

inline const NetModels::DebugCommand *GetDebugCommand(const void *buf) {
  return ::flatbuffers::GetRoot<NetModels::DebugCommand>(buf);
}

inline const NetModels::DebugCommand *GetSizePrefixedDebugCommand(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NetModels::DebugCommand>(buf);
}

inline const char *DebugCommandIdentifier() {
  return "DEBB";
}

inline bool DebugCommandBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DebugCommandIdentifier());
}

inline bool SizePrefixedDebugCommandBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DebugCommandIdentifier(), true);
}

inline bool VerifyDebugCommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NetModels::DebugCommand>(DebugCommandIdentifier());
}

inline bool VerifySizePrefixedDebugCommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NetModels::DebugCommand>(DebugCommandIdentifier());
}

inline void FinishDebugCommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::DebugCommand> root) {
  fbb.Finish(root, DebugCommandIdentifier());
}

inline void FinishSizePrefixedDebugCommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::DebugCommand> root) {
  fbb.FinishSizePrefixed(root, DebugCommandIdentifier());
}

inline std::unique_ptr<NetModels::DebugCommandT> UnPackDebugCommand(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::DebugCommandT>(GetDebugCommand(buf)->UnPack(res));
}

inline std::unique_ptr<NetModels::DebugCommandT> UnPackSizePrefixedDebugCommand(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::DebugCommandT>(GetSizePrefixedDebugCommand(buf)->UnPack(res));
}

}  // namespace NetModels

#endif  // FLATBUFFERS_GENERATED_DEBUGCOMMAND_NETMODELS_H_
