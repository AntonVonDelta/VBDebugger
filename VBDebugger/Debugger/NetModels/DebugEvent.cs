// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace NetModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DebugEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static DebugEvent GetRootAsDebugEvent(ByteBuffer _bb) { return GetRootAsDebugEvent(_bb, new DebugEvent()); }
  public static DebugEvent GetRootAsDebugEvent(ByteBuffer _bb, DebugEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyDebugEvent(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, DebugEventVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NetModels.EventType EventType { get { int o = __p.__offset(4); return o != 0 ? (NetModels.EventType)__p.bb.GetInt(o + __p.bb_pos) : NetModels.EventType.None; } }
  public string ScopeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScopeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetScopeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetScopeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string SourceFileName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceFileNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSourceFileNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSourceFileNameArray() { return __p.__vector_as_array<byte>(8); }
  public int LineNumber { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScopeData { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScopeDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetScopeDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetScopeDataArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<NetModels.DebugEvent> CreateDebugEvent(FlatBufferBuilder builder,
      NetModels.EventType event_type = NetModels.EventType.None,
      StringOffset scope_nameOffset = default(StringOffset),
      StringOffset source_file_nameOffset = default(StringOffset),
      int line_number = 0,
      StringOffset scope_dataOffset = default(StringOffset)) {
    builder.StartTable(5);
    DebugEvent.AddScopeData(builder, scope_dataOffset);
    DebugEvent.AddLineNumber(builder, line_number);
    DebugEvent.AddSourceFileName(builder, source_file_nameOffset);
    DebugEvent.AddScopeName(builder, scope_nameOffset);
    DebugEvent.AddEventType(builder, event_type);
    return DebugEvent.EndDebugEvent(builder);
  }

  public static void StartDebugEvent(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventType(FlatBufferBuilder builder, NetModels.EventType eventType) { builder.AddInt(0, (int)eventType, 0); }
  public static void AddScopeName(FlatBufferBuilder builder, StringOffset scopeNameOffset) { builder.AddOffset(1, scopeNameOffset.Value, 0); }
  public static void AddSourceFileName(FlatBufferBuilder builder, StringOffset sourceFileNameOffset) { builder.AddOffset(2, sourceFileNameOffset.Value, 0); }
  public static void AddLineNumber(FlatBufferBuilder builder, int lineNumber) { builder.AddInt(3, lineNumber, 0); }
  public static void AddScopeData(FlatBufferBuilder builder, StringOffset scopeDataOffset) { builder.AddOffset(4, scopeDataOffset.Value, 0); }
  public static Offset<NetModels.DebugEvent> EndDebugEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // scope_name
    builder.Required(o, 8);  // source_file_name
    builder.Required(o, 12);  // scope_data
    return new Offset<NetModels.DebugEvent>(o);
  }
  public static void FinishDebugEventBuffer(FlatBufferBuilder builder, Offset<NetModels.DebugEvent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDebugEventBuffer(FlatBufferBuilder builder, Offset<NetModels.DebugEvent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public DebugEventT UnPack() {
    var _o = new DebugEventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugEventT _o) {
    _o.EventType = this.EventType;
    _o.ScopeName = this.ScopeName;
    _o.SourceFileName = this.SourceFileName;
    _o.LineNumber = this.LineNumber;
    _o.ScopeData = this.ScopeData;
  }
  public static Offset<NetModels.DebugEvent> Pack(FlatBufferBuilder builder, DebugEventT _o) {
    if (_o == null) return default(Offset<NetModels.DebugEvent>);
    var _scope_name = _o.ScopeName == null ? default(StringOffset) : builder.CreateString(_o.ScopeName);
    var _source_file_name = _o.SourceFileName == null ? default(StringOffset) : builder.CreateString(_o.SourceFileName);
    var _scope_data = _o.ScopeData == null ? default(StringOffset) : builder.CreateString(_o.ScopeData);
    return CreateDebugEvent(
      builder,
      _o.EventType,
      _scope_name,
      _source_file_name,
      _o.LineNumber,
      _scope_data);
  }
}

public class DebugEventT
{
  public NetModels.EventType EventType { get; set; }
  public string ScopeName { get; set; }
  public string SourceFileName { get; set; }
  public int LineNumber { get; set; }
  public string ScopeData { get; set; }

  public DebugEventT() {
    this.EventType = NetModels.EventType.None;
    this.ScopeName = null;
    this.SourceFileName = null;
    this.LineNumber = 0;
    this.ScopeData = null;
  }
  public static DebugEventT DeserializeFromBinary(byte[] fbBuffer) {
    return DebugEvent.GetRootAsDebugEvent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DebugEvent.FinishDebugEventBuffer(fbb, DebugEvent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DebugEventVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventType*/, 4 /*NetModels.EventType*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ScopeName*/, true)
      && verifier.VerifyString(tablePos, 8 /*SourceFileName*/, true)
      && verifier.VerifyField(tablePos, 10 /*LineNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*ScopeData*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
