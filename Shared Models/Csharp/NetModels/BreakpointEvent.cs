// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace NetModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BreakpointEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BreakpointEvent GetRootAsBreakpointEvent(ByteBuffer _bb) { return GetRootAsBreakpointEvent(_bb, new BreakpointEvent()); }
  public static BreakpointEvent GetRootAsBreakpointEvent(ByteBuffer _bb, BreakpointEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool BreakpointEventBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DEBB"); }
  public static bool VerifyBreakpointEvent(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DEBB", false, BreakpointEventVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BreakpointEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NetModels.EventType EventType { get { int o = __p.__offset(4); return o != 0 ? (NetModels.EventType)__p.bb.GetInt(o + __p.bb_pos) : NetModels.EventType.EnteredProcedure; } }
  public NetModels.StackDump? StackDump { get { int o = __p.__offset(6); return o != 0 ? (NetModels.StackDump?)(new NetModels.StackDump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<NetModels.BreakpointEvent> CreateBreakpointEvent(FlatBufferBuilder builder,
      NetModels.EventType event_type = NetModels.EventType.EnteredProcedure,
      Offset<NetModels.StackDump> stack_dumpOffset = default(Offset<NetModels.StackDump>)) {
    builder.StartTable(2);
    BreakpointEvent.AddStackDump(builder, stack_dumpOffset);
    BreakpointEvent.AddEventType(builder, event_type);
    return BreakpointEvent.EndBreakpointEvent(builder);
  }

  public static void StartBreakpointEvent(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEventType(FlatBufferBuilder builder, NetModels.EventType eventType) { builder.AddInt(0, (int)eventType, 0); }
  public static void AddStackDump(FlatBufferBuilder builder, Offset<NetModels.StackDump> stackDumpOffset) { builder.AddOffset(1, stackDumpOffset.Value, 0); }
  public static Offset<NetModels.BreakpointEvent> EndBreakpointEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<NetModels.BreakpointEvent>(o);
  }
  public static void FinishBreakpointEventBuffer(FlatBufferBuilder builder, Offset<NetModels.BreakpointEvent> offset) { builder.Finish(offset.Value, "DEBB"); }
  public static void FinishSizePrefixedBreakpointEventBuffer(FlatBufferBuilder builder, Offset<NetModels.BreakpointEvent> offset) { builder.FinishSizePrefixed(offset.Value, "DEBB"); }
  public BreakpointEventT UnPack() {
    var _o = new BreakpointEventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BreakpointEventT _o) {
    _o.EventType = this.EventType;
    _o.StackDump = this.StackDump.HasValue ? this.StackDump.Value.UnPack() : null;
  }
  public static Offset<NetModels.BreakpointEvent> Pack(FlatBufferBuilder builder, BreakpointEventT _o) {
    if (_o == null) return default(Offset<NetModels.BreakpointEvent>);
    var _stack_dump = _o.StackDump == null ? default(Offset<NetModels.StackDump>) : NetModels.StackDump.Pack(builder, _o.StackDump);
    return CreateBreakpointEvent(
      builder,
      _o.EventType,
      _stack_dump);
  }
}

public class BreakpointEventT
{
  public NetModels.EventType EventType { get; set; }
  public NetModels.StackDumpT StackDump { get; set; }

  public BreakpointEventT() {
    this.EventType = NetModels.EventType.EnteredProcedure;
    this.StackDump = null;
  }
  public static BreakpointEventT DeserializeFromBinary(byte[] fbBuffer) {
    return BreakpointEvent.GetRootAsBreakpointEvent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BreakpointEvent.FinishBreakpointEventBuffer(fbb, BreakpointEvent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class BreakpointEventVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventType*/, 4 /*NetModels.EventType*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*StackDump*/, NetModels.StackDumpVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
