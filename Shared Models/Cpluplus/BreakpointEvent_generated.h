// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BREAKPOINTEVENT_NETMODELS_H_
#define FLATBUFFERS_GENERATED_BREAKPOINTEVENT_NETMODELS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace NetModels {

struct BreakpointEvent;
struct BreakpointEventBuilder;
struct BreakpointEventT;

enum class EventType : int32_t {
  EnteredProcedure = 0,
  LeaveProcedure = 1,
  Log = 2,
  MIN = EnteredProcedure,
  MAX = Log
};

inline const EventType (&EnumValuesEventType())[3] {
  static const EventType values[] = {
    EventType::EnteredProcedure,
    EventType::LeaveProcedure,
    EventType::Log
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[4] = {
    "EnteredProcedure",
    "LeaveProcedure",
    "Log",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType::EnteredProcedure, EventType::Log)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

struct BreakpointEventT : public ::flatbuffers::NativeTable {
  typedef BreakpointEvent TableType;
  NetModels::EventType event_type = NetModels::EventType::EnteredProcedure;
};

struct BreakpointEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BreakpointEventT NativeTableType;
  typedef BreakpointEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4
  };
  NetModels::EventType event_type() const {
    return static_cast<NetModels::EventType>(GetField<int32_t>(VT_EVENT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_EVENT_TYPE, 4) &&
           verifier.EndTable();
  }
  BreakpointEventT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BreakpointEventT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<BreakpointEvent> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BreakpointEventT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BreakpointEventBuilder {
  typedef BreakpointEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type(NetModels::EventType event_type) {
    fbb_.AddElement<int32_t>(BreakpointEvent::VT_EVENT_TYPE, static_cast<int32_t>(event_type), 0);
  }
  explicit BreakpointEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BreakpointEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BreakpointEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BreakpointEvent> CreateBreakpointEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NetModels::EventType event_type = NetModels::EventType::EnteredProcedure) {
  BreakpointEventBuilder builder_(_fbb);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

::flatbuffers::Offset<BreakpointEvent> CreateBreakpointEvent(::flatbuffers::FlatBufferBuilder &_fbb, const BreakpointEventT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BreakpointEventT *BreakpointEvent::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BreakpointEventT>(new BreakpointEventT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BreakpointEvent::UnPackTo(BreakpointEventT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = event_type(); _o->event_type = _e; }
}

inline ::flatbuffers::Offset<BreakpointEvent> BreakpointEvent::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BreakpointEventT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBreakpointEvent(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<BreakpointEvent> CreateBreakpointEvent(::flatbuffers::FlatBufferBuilder &_fbb, const BreakpointEventT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const BreakpointEventT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _event_type = _o->event_type;
  return NetModels::CreateBreakpointEvent(
      _fbb,
      _event_type);
}

inline const NetModels::BreakpointEvent *GetBreakpointEvent(const void *buf) {
  return ::flatbuffers::GetRoot<NetModels::BreakpointEvent>(buf);
}

inline const NetModels::BreakpointEvent *GetSizePrefixedBreakpointEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NetModels::BreakpointEvent>(buf);
}

inline const char *BreakpointEventIdentifier() {
  return "DEBB";
}

inline bool BreakpointEventBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BreakpointEventIdentifier());
}

inline bool SizePrefixedBreakpointEventBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BreakpointEventIdentifier(), true);
}

inline bool VerifyBreakpointEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NetModels::BreakpointEvent>(BreakpointEventIdentifier());
}

inline bool VerifySizePrefixedBreakpointEventBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NetModels::BreakpointEvent>(BreakpointEventIdentifier());
}

inline void FinishBreakpointEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::BreakpointEvent> root) {
  fbb.Finish(root, BreakpointEventIdentifier());
}

inline void FinishSizePrefixedBreakpointEventBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NetModels::BreakpointEvent> root) {
  fbb.FinishSizePrefixed(root, BreakpointEventIdentifier());
}

inline std::unique_ptr<NetModels::BreakpointEventT> UnPackBreakpointEvent(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::BreakpointEventT>(GetBreakpointEvent(buf)->UnPack(res));
}

inline std::unique_ptr<NetModels::BreakpointEventT> UnPackSizePrefixedBreakpointEvent(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetModels::BreakpointEventT>(GetSizePrefixedBreakpointEvent(buf)->UnPack(res));
}

}  // namespace NetModels

#endif  // FLATBUFFERS_GENERATED_BREAKPOINTEVENT_NETMODELS_H_
